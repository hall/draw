include:
  - template: SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml

# run the pipeline only on MRs, tags, and default branch
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

image: node:16

stages:
  - test
  - package
  - publish

lint:
  stage: test
  script:
    - npm ci
    - npm run lint

test:
  stage: test
  variables:
    DISPLAY: ":99.0"
  before_script:
    - |
      apt update && apt install -y \
        libasound2-dev \
        libatk-bridge2.0-dev \
        libatk1.0-dev \
        libdrm-dev \
        libgtk-3-dev \
        libnss3 \
        xvfb
    - /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

  script:
    - npm ci
    - npm run test

.package:
  stage: package
  script:
    - npm ci
    - npx vsce package
  artifacts:
    paths:
      - "*.vsix"

package:test:
  extends: .package
  artifacts:
    expire_in: 10 days
  except:
    - tags

package:release:
  extends: .package
  artifacts:
    expire_in: 1 year
  only:
    - tags

bump:
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - changes:
        - CHANGELOG.md
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - apt update && apt install -y jq
  script:
    - | # if unpublished version was bumped in CHANGELOG, push a tag
      set -eo pipefail

      # use the CHANGELOG as the source of truth
      CURRENT=$(perl -lne 'print for /## \[(\d*\.\d*\.\d*)\] /' CHANGELOG.md | head -1)

      PACKAGE=$(jq -r '.version' package.json)
      if [[ "$CURRENT" != "$PACKAGE" ]]; then
        echo "ERROR: package.json version ($PACKAGE) does not match CHANGELOG version ($CURRENT)"
        exit 1
      fi

      LATEST=$(npx vsce show hall.draw --json | jq -r '.versions[0].version')
      if [[ "$CURRENT" != "$LATEST" ]]; then
        git tag "$CURRENT"

        git remote set-url origin "https://git:$GITLAB_PAT@$CI_SERVER_HOST/$CI_PROJECT_PATH"
        git push origin "$CURRENT"
      fi

publish:
  stage: publish
  script:
    - npm ci
    - npx ovsx publish *.vsix -p $OPENVSX_ACCESS_TOKEN
    - npx vsce publish --packagePath *.vsix -p $AZURE_ACCESS_TOKEN
  only:
    - tags

# https://gitlab.com/gitlab-org/gitlab-vscode-extension/-/blob/main/.gitlab-ci.yml
# run security scanning on every pipeline execution; https://gitlab.com/gitlab-org/gitlab/-/issues/217668
.secure-jobs-config: &secure-jobs-config
  needs: []
  rules:
    - when: on_success
gemnasium-dependency_scanning:
  <<: *secure-jobs-config
license_scanning:
  <<: *secure-jobs-config
eslint-sast:
  <<: *secure-jobs-config
nodejs-scan-sast:
  <<: *secure-jobs-config
secret_detection:
  <<: *secure-jobs-config
  # secrets detection can't run on tags: https://gitlab.com/gitlab-org/gitlab/-/issues/254199
  rules:
    - if: $CI_COMMIT_TAG
      when: "never"
